"""-m

Revision ID: a8718430a918
Revises: 
Create Date: 2022-06-14 08:38:51.842981

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a8718430a918'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('inactive', 'active', name='ck_users_statuses', native_enum=False, create_constraint=True, length=255), server_default='inactive', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username'))
    )
    op.create_index(op.f('ix_users_first_name'), 'users', ['first_name'], unique=False)
    op.create_table('activities',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('duration', sa.Time(), nullable=False),
    sa.Column('path', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('inactive', 'active', name='ck_activities_statuses', native_enum=False, create_constraint=True, length=255), server_default='active', nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_activities_user_id'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_activities'))
    )
    op.create_index(op.f('ix_activities_user_id'), 'activities', ['user_id'], unique=False)
    op.create_table('properties',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('price', sa.Float(precision=2), nullable=False),
    sa.Column('living_area', sa.Float(precision=2), nullable=False),
    sa.Column('status', sa.Enum('inactive', 'active', name='ck_property_statuses', native_enum=False, create_constraint=True, length=255), server_default='active', nullable=False),
    sa.Column('owner_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_properties_owner_id'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_properties'))
    )
    op.create_index(op.f('ix_properties_owner_id'), 'properties', ['owner_id'], unique=False)
    op.create_table('sales',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('buyer_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('property_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], name=op.f('fk_sales_buyer_id'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['property_id'], ['properties.id'], name=op.f('fk_sales_property_id'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sales'))
    )
    op.create_index(op.f('ix_sales_buyer_id'), 'sales', ['buyer_id'], unique=False)
    op.create_index(op.f('ix_sales_property_id'), 'sales', ['property_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sales_property_id'), table_name='sales')
    op.drop_index(op.f('ix_sales_buyer_id'), table_name='sales')
    op.drop_table('sales')
    op.drop_index(op.f('ix_properties_owner_id'), table_name='properties')
    op.drop_table('properties')
    op.drop_index(op.f('ix_activities_user_id'), table_name='activities')
    op.drop_table('activities')
    op.drop_index(op.f('ix_users_first_name'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
